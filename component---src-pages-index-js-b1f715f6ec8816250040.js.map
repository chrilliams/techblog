{"version":3,"sources":["webpack:///./src/components/Header.js","webpack:///./src/components/Layout.js","webpack:///./src/hooks/useSiteMetadata.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Header","siteTitle","siteDescription","to","AppStyles","styled","main","Layout","children","site","siteMetadata","title","description","IndexWrapper","PostWrapper","div","data","allMdx","nodes","map","id","excerpt","frontmatter","fields","key","slug","date","query","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"0JAGaA,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,gBAAd,OACpB,kBAAC,IAAD,CAAMC,GAAG,KACP,4BAAKF,GACL,2BAAIC,KCNR,kCAKA,IAAME,EAAYC,IAAOC,KAAV,oEAAGD,CAAH,gCAKFE,EAAS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,ECRH,OAC3BC,KAYIC,aDJJC,EAD8B,EAC9BA,MAAOC,EADuB,EACvBA,YACf,OACE,kBAACR,EAAD,KACE,kBAAC,EAAD,CAAQH,UAAWU,EAAOT,gBAAiBU,IAC1CJ,K,kCEfP,0GAKMK,EAAeR,IAAOC,KAAV,sEAAGD,CAAH,MAEZS,EAAcT,IAAOU,IAAV,qEAAGV,CAAH,MAEF,sBAAe,IAAZW,EAAW,EAAXA,KAChB,OACE,kBAAC,IAAD,KACE,kBAACH,EAAD,KACGG,EAAKC,OAAOC,MAAMC,KACjB,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,OAA7B,OACE,kBAACT,EAAD,CAAaU,IAAKJ,GAChB,kBAAC,IAAD,CAAMjB,GAAIoB,EAAOE,MACf,4BAAKH,EAAYX,OACjB,2BAAIW,EAAYI,MAChB,2BAAIL,WAUb,IAAMM,EAAK,c,kCC7BlB,sGAcyBC,QAAOC,QAELC,IAAMC,cAAc,K,sNChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,geCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,I,+VAApB,EACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-index-js-b1f715f6ec8816250040.js","sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\n\nexport const Header = ({ siteTitle, siteDescription }) => (\n  <Link to=\"/\">\n    <h1>{siteTitle}</h1>\n    <p>{siteDescription}</p>\n  </Link>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { useSiteMetadata } from '../hooks/useSiteMetadata';\nimport { Header } from './Header';\n\nconst AppStyles = styled.main`\n  width: 800px;\n  margin: 0 auto;\n`;\n\nexport const Layout = ({ children }) => {\n  const { title, description } = useSiteMetadata();\n  return (\n    <AppStyles>\n      <Header siteTitle={title} siteDescription={description} />\n      {children}\n    </AppStyles>\n  );\n};","import { graphql, useStaticQuery } from 'gatsby';\n\nexport const useSiteMetadata = () => {\n  const { site } = useStaticQuery(\n    graphql`\n      query SITE_METADATA_QUERY {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  );\n  return site.siteMetadata;\n};","import { graphql, Link } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Layout } from '../components/Layout';\n\nconst IndexWrapper = styled.main``;\n\nconst PostWrapper = styled.div``;\n\nexport default ({ data }) => {\n  return (\n    <Layout>\n      <IndexWrapper>\n        {data.allMdx.nodes.map(\n          ({ id, excerpt, frontmatter, fields }) => (\n            <PostWrapper key={id}>\n              <Link to={fields.slug}>\n                <h1>{frontmatter.title}</h1>\n                <p>{frontmatter.date}</p>\n                <p>{excerpt}</p>\n              </Link>\n            </PostWrapper>\n          )\n        )}\n      </IndexWrapper>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query SITE_INDEX_QUERY {\n    allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      nodes {\n        id\n        excerpt(pruneLength: 250)\n        frontmatter {\n          title\n          date\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`;","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}