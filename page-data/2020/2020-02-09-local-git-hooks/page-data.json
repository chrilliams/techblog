{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/2020/2020-02-09-local-git-hooks/","result":{"data":{"mdx":{"id":"b69e3152-c654-5d78-9169-a0350db9d118","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using linters against staged git files\",\n  \"date\": \"2020-02-09T00:00:00.000Z\",\n  \"published\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"After annoying myself many many times what a build fails on a CI server went there are simple linting failures, I decided to do a bit of research to see if it could be automated for staged files before commit.\"), mdx(\"p\", null, \"I've been using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prettier\"), \" in Visual Code Studio for some time and liked it, but it does rely on every developer within the project setting things up.\"), mdx(\"h2\", null, \"pre-commit checks\"), mdx(\"p\", null, \"Pre-commit checks run after staging your changes and running git commit and before a commit is completed. If the checks fail then the commit is not made and an error shown, while if all checks pass the commit is made as normal.\"), mdx(\"h2\", null, \"lint-stage\"), mdx(\"p\", null, \"Then I found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/okonet/lint-staged\"\n  }), \"lint-stage\"), \", which seem to be exactly what I wanted.\"), mdx(\"h3\", null, \"Setup\"), mdx(\"p\", null, \"running:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx mrm lint-staged\")), mdx(\"p\", null, \"is the quickest way to get it running. This will install husky and lint-staged, then add a configuration to the project\\u2019s package.json that will automatically format supported files in a pre-commit hook.\"), mdx(\"p\", null, \"This will automatically to you package.json for you.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"  \\\"husky\\\": {\\n    \\\"hooks\\\": {\\n      \\\"pre-commit\\\": \\\"lint-staged\\\"\\n    }\\n  },\\n  \\\"lint-staged\\\": {\\n    \\\"*.{js,css,md}\\\": \\\"prettier --write\\\"\\n  }\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"you need to have eslint and/or prettier installed\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx install-peerdeps --dev eslint-config-airbnb\"), \" - airbnb is the gold standard of javascript linting rules\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install -D eslint-config-prettier eslint-plugin-prettier\"), \"\\nCreate .eslintrc.json file in your project\\u2019s root directory:\"), mdx(\"pre\", {\n    parentName: \"blockquote\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"{\\n  \\\"extends\\\": [\\\"airbnb\\\", \\\"prettier\\\"],\\n  \\\"plugins\\\": [\\\"prettier\\\"],\\n  \\\"rules\\\": {\\n\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\\"prettier/prettier\\\": [\\\"error\\\"]\\n\")), mdx(\"p\", null, \"}\\n}\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"> before running the above commands. It will then set up your package.json for you :)\\n\\n### Commit code\\n\\nWhen committing code the hook with automatically run and fix any linting errors\\n\\n```sh\\nxxx@xxx techblog % git commit -m \\\"staged-lint\\\"\\nhusky > pre-commit (node v12.13.1)\\n  \\u2714 Preparing...\\n  \\u2714 Running tasks...\\n  \\u2714 Applying modifications...\\n  \\u2714 Cleaning up...\\n[master 4080f84] staged-lint\\n 5 files changed, 57 insertions(+), 50 deletions(-)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Using linters against staged git files","date":"2020 February 9th"}}},"pageContext":{"slug":"/2020/2020-02-09-local-git-hooks/","previous":{"fields":{"slug":"/2020/2020-02-04-custom-resources/"},"frontmatter":{"title":"Cloudformation custom resources taking hours to timeout"}},"next":null}}}