{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/2020/2020-02-04-custom-resources/","result":{"data":{"mdx":{"id":"7f4112a2-8fe9-510b-9952-e86912bc4499","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Cloudformation custom resources taking hours to timeout\",\n  \"date\": \"2020-02-04T00:00:00.000Z\",\n  \"published\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I have spent ages during development waiting for cloudformation stacks to timeout because my code has errored,\\nand so a response is never sent.  Very often I create a whole new stack with the serverless framework.\"), mdx(\"h3\", null, \"What is a custom resource?\"), mdx(\"p\", null, \"In a CloudFormation template, you use the AWS::CloudFormation::CustomResource or Custom::String resource type to\\nspecify custom resources.\"), mdx(\"p\", null, \"Custom resources provide a way for you to write custom provisioning logic in CloudFormation template and\\nhave CloudFormation run it during a stack operation, such as when you create, update or delete a stack.\\nFor more information,\\nsee \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html\"\n  }), \"Custom Resources\"), \".\"), mdx(\"h3\", null, \"Watchdogs\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A watchdog timer (sometimes called a computer operating properly or COP timer, or simply a watchdog) is an electronic timer\\nthat is used to detect and recover from computer malfunctions. During normal operation, the computer regularly resets the\\natchdog timer to prevent it from elapsing, or \\\"timing out\\\". If, due to a hardware fault or program error, the computer\\nfails to reset the watchdog, the timer will elapse and generate a timeout signal. The timeout signal is used to\\ninitiate corrective action or actions. The corrective actions typically include placing the computer system in a safe state\\nand restoring normal system operation.\"), mdx(\"blockquote\", {\n    parentName: \"blockquote\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Watchdog_timer\"\n  }), \"https://en.wikipedia.org/wiki/Watchdog_timer\")))), mdx(\"h3\", null, \"When to timeout?\"), mdx(\"p\", null, \"Within a Lambda's context you have access to context.getRemainingTimeInMillis(), which returns the number of milliseconds left before\\nthe execution times out.  This is great because we can timeout and send a response to AWS Cloudformation before the execution timeout.\"), mdx(\"h4\", null, \"Example Function\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"'use strict';\\nconst response = require('cfn-response-promise')\\n\\nconst handler = async function(event, context) {\\n  // Install watchdog timer as the first thing\\n  setupWatchdogTimer(event, context)\\n  console.log('REQUEST RECEIVED:\\\\n' + JSON.stringify(event))\\n  if (event.RequestType === 'Create') {\\n    console.log('CREATE!')\\n    // Put your custom create logic here\\n    await response.send(event, context, response.SUCCESS, { 'Message': 'Resource creation successful!' });\\n\\n  } else if (event.RequestType === 'Update') {\\n    console.log('UDPATE!')\\n    // Put your custom update logic here\\n    await response.send(event, context, response.SUCCESS, { 'Message': 'Resource update successful!' });\\n\\n  } else if (event.RequestType === 'Delete') {\\n    console.log('DELETE!')\\n    // Put your custom delete logic here\\n    await response.send(event, context, response.SUCCESS, { 'Message': 'Resource deletion successful!'});\\n\\n  } else {\\n    console.log('FAILED!')\\n    await response.send(event, context, response.FAILED);\\n  }\\n  return await response.send(event, context, response.SUCCESS);\\n\\n};\\n\\nfunction setupWatchdogTimer (event, context) {\\n  const timeoutHandler = () => {\\n    console.log('Timeout FAILURE!')\\n    // Emit event to 'sendResponse', then callback with an error from this\\n    // function\\n    return await response.send(event, context, response.SUCCESS, returnData);\\n  }\\n\\n  // Set timer so it triggers one second before this function would timeout\\n  setTimeout(timeoutHandler, context.getRemainingTimeInMillis() - 1000)\\n}\\n\\nmodule.exports.handler = handler;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Cloudformation custom resources taking hours to timeout","date":"2020 February 4th"}}},"pageContext":{"slug":"/2020/2020-02-04-custom-resources/","previous":null,"next":{"fields":{"slug":"/2020/2020-02-02-deploying-a-blog-site/"},"frontmatter":{"title":"Deploying a tech blog site"}}}}}